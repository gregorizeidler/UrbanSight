"""
Profile Chatbot Agent
Chatbot interativo para definir perfil do usu√°rio
"""

import logging
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from openai import OpenAI
import json

logger = logging.getLogger(__name__)

@dataclass
class UserProfile:
    # Dados demogr√°ficos
    age_group: str  # "18-25", "26-35", "36-45", "46-60", "60+"
    family_status: str  # "Solteiro", "Casal", "Fam√≠lia com crian√ßas", "Fam√≠lia sem crian√ßas"
    income_level: str  # "Baixa", "M√©dia", "M√©dia-alta", "Alta"
    
    # Estilo de vida
    work_style: str  # "Presencial", "H√≠brido", "Remoto"
    transport_preference: str  # "Carro", "Transporte p√∫blico", "Bicicleta", "Caminhada"
    social_lifestyle: str  # "Caseiro", "Social moderado", "Muito social"
    
    # Prioridades habitacionais
    property_type: str  # "Apartamento", "Casa", "Ambos"
    budget_range: str  # "At√© 300k", "300k-500k", "500k-1M", "1M+"
    investment_purpose: str  # "Moradia", "Investimento", "Ambos"
    
    # Prefer√™ncias urbanas
    priority_factors: List[str]  # Ex: ["Seguran√ßa", "Transporte", "Escolas", "Lazer"]
    neighborhood_style: str  # "Centro", "Residencial", "Misto", "Sub√∫rbio"
    noise_tolerance: str  # "Baixa", "M√©dia", "Alta"
    
    # Necessidades espec√≠ficas
    has_pets: bool
    has_elderly: bool
    has_children: bool
    accessibility_needs: bool
    
    # Score de compatibilidade
    compatibility_weights: Dict[str, float]

@dataclass
class ChatbotQuestion:
    id: str
    question: str
    options: List[str]
    question_type: str  # "single", "multiple", "scale"
    category: str

@dataclass
class ProfileChatbotResult:
    user_profile: UserProfile
    compatibility_matrix: Dict[str, float]
    personalized_recommendations: List[str]
    profile_summary: str
    success: bool
    error_message: Optional[str] = None

class ProfileChatbot:
    """Chatbot interativo para definir perfil do usu√°rio"""
    
    def __init__(self, openai_api_key: Optional[str] = None):
        self.openai_client = OpenAI(api_key=openai_api_key) if openai_api_key else None
        self.questions = self._initialize_questions()
        
    def _initialize_questions(self) -> List[ChatbotQuestion]:
        """Inicializa as perguntas do chatbot"""
        return [
            ChatbotQuestion(
                id="age_group",
                question="üëã Qual sua faixa et√°ria?",
                options=["18-25 anos", "26-35 anos", "36-45 anos", "46-60 anos", "60+ anos"],
                question_type="single",
                category="demogr√°fico"
            ),
            ChatbotQuestion(
                id="family_status",
                question="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Qual sua situa√ß√£o familiar atual?",
                options=["Solteiro(a)", "Casal sem filhos", "Casal com filhos", "Pai/m√£e solo", "Dividindo moradia"],
                question_type="single",
                category="demogr√°fico"
            ),
            ChatbotQuestion(
                id="income_level",
                question="üí∞ Como voc√™ classificaria sua renda familiar?",
                options=["At√© 5 sal√°rios m√≠nimos", "5-10 sal√°rios m√≠nimos", "10-20 sal√°rios m√≠nimos", "Acima de 20 sal√°rios m√≠nimos"],
                question_type="single",
                category="demogr√°fico"
            ),
            ChatbotQuestion(
                id="work_style",
                question="üíº Como √© seu estilo de trabalho?",
                options=["100% presencial", "H√≠brido (casa + escrit√≥rio)", "100% remoto", "Aposentado(a)", "Estudante"],
                question_type="single",
                category="estilo_vida"
            ),
            ChatbotQuestion(
                id="transport_preference",
                question="üöó Qual seu meio de transporte preferido no dia a dia?",
                options=["Carro pr√≥prio", "Transporte p√∫blico", "Bicicleta", "Caminhada", "Motocicleta", "Aplicativos de transporte"],
                question_type="multiple",
                category="estilo_vida"
            ),
            ChatbotQuestion(
                id="social_lifestyle",
                question="üéâ Como voc√™ descreveria seu estilo social?",
                options=["Prefiro ficar em casa", "Sa√≠das ocasionais", "Vida social ativa", "Muito soci√°vel - sempre saindo"],
                question_type="single",
                category="estilo_vida"
            ),
            ChatbotQuestion(
                id="property_type",
                question="üè† Que tipo de im√≥vel voc√™ busca?",
                options=["Apartamento", "Casa", "Studio/Loft", "N√£o tenho prefer√™ncia"],
                question_type="single",
                category="habitacional"
            ),
            ChatbotQuestion(
                id="investment_purpose",
                question="üéØ Qual o principal objetivo da compra?",
                options=["Para morar", "Para investimento/aluguel", "Ambos (morar e investir)", "Casa de veraneio"],
                question_type="single",
                category="habitacional"
            ),
            ChatbotQuestion(
                id="priority_factors",
                question="‚≠ê Quais fatores s√£o mais importantes para voc√™? (pode escolher at√© 4)",
                options=[
                    "Seguran√ßa", "Proximidade ao trabalho", "Transporte p√∫blico", 
                    "Escolas/educa√ß√£o", "Hospitais/sa√∫de", "Com√©rcio/shopping", 
                    "Restaurantes", "Vida noturna", "Parques/lazer", "Academia/esportes",
                    "Sil√™ncio/tranquilidade", "Pre√ßo acess√≠vel"
                ],
                question_type="multiple",
                category="prefer√™ncias"
            ),
            ChatbotQuestion(
                id="neighborhood_style",
                question="üèôÔ∏è Que tipo de bairro voc√™ prefere?",
                options=["Centro da cidade", "Bairro residencial tranquilo", "√Årea mista (residencial + comercial)", "Sub√∫rbio afastado"],
                question_type="single",
                category="prefer√™ncias"
            ),
            ChatbotQuestion(
                id="noise_tolerance",
                question="üîä Qual sua toler√¢ncia a ru√≠do urbano?",
                options=["Preciso de muito sil√™ncio", "Ru√≠do moderado √© ok", "N√£o me incomodo com ru√≠do"],
                question_type="single",
                category="prefer√™ncias"
            ),
            ChatbotQuestion(
                id="special_needs",
                question="üè† Alguma necessidade especial? (pode marcar v√°rias)",
                options=["Tenho pets", "Idosos na fam√≠lia", "Crian√ßas pequenas", "Necessidades de acessibilidade", "Nenhuma"],
                question_type="multiple",
                category="necessidades"
            )
        ]
    
    def get_questions(self) -> List[ChatbotQuestion]:
        """Retorna todas as perguntas do chatbot"""
        return self.questions
    
    def process_responses(self, responses: Dict[str, Any]) -> ProfileChatbotResult:
        """Processa as respostas e cria o perfil do usu√°rio"""
        
        try:
            logger.info("Processando respostas do chatbot de perfil")
            
            # Criar perfil baseado nas respostas
            user_profile = self._create_user_profile(responses)
            
            # Calcular matriz de compatibilidade
            compatibility_matrix = self._calculate_compatibility_weights(user_profile)
            
            # Gerar recomenda√ß√µes personalizadas
            recommendations = self._generate_personalized_recommendations(user_profile)
            
            # Criar resumo do perfil
            profile_summary = self._create_profile_summary(user_profile)
            
            return ProfileChatbotResult(
                user_profile=user_profile,
                compatibility_matrix=compatibility_matrix,
                personalized_recommendations=recommendations,
                profile_summary=profile_summary,
                success=True
            )
            
        except Exception as e:
            logger.error(f"Erro processando respostas: {str(e)}")
            return ProfileChatbotResult(
                user_profile=None,
                compatibility_matrix={},
                personalized_recommendations=[],
                profile_summary="",
                success=False,
                error_message=str(e)
            )
    
    def _create_user_profile(self, responses: Dict[str, Any]) -> UserProfile:
        """Cria o perfil do usu√°rio baseado nas respostas"""
        
        # Processar necessidades especiais
        special_needs = responses.get('special_needs', [])
        has_pets = "Tenho pets" in special_needs
        has_elderly = "Idosos na fam√≠lia" in special_needs
        has_children = "Crian√ßas pequenas" in special_needs
        accessibility_needs = "Necessidades de acessibilidade" in special_needs
        
        # Calcular pesos de compatibilidade baseados nas prioridades
        priority_factors = responses.get('priority_factors', [])
        compatibility_weights = self._calculate_priority_weights(priority_factors)
        
        return UserProfile(
            age_group=responses.get('age_group', ''),
            family_status=responses.get('family_status', ''),
            income_level=responses.get('income_level', ''),
            work_style=responses.get('work_style', ''),
            transport_preference=', '.join(responses.get('transport_preference', [])),
            social_lifestyle=responses.get('social_lifestyle', ''),
            property_type=responses.get('property_type', ''),
            budget_range=self._income_to_budget(responses.get('income_level', '')),
            investment_purpose=responses.get('investment_purpose', ''),
            priority_factors=priority_factors,
            neighborhood_style=responses.get('neighborhood_style', ''),
            noise_tolerance=responses.get('noise_tolerance', ''),
            has_pets=has_pets,
            has_elderly=has_elderly,
            has_children=has_children,
            accessibility_needs=accessibility_needs,
            compatibility_weights=compatibility_weights
        )
    
    def _calculate_priority_weights(self, priority_factors: List[str]) -> Dict[str, float]:
        """Calcula pesos baseados nas prioridades do usu√°rio"""
        
        weights = {
            'safety_score': 0.1,
            'accessibility_score': 0.15,
            'convenience_score': 0.15,
            'walk_score': 0.15,
            'quality_of_life_score': 0.15,
            'total_score': 0.3
        }
        
        # Ajustar pesos baseado nas prioridades
        priority_mapping = {
            'Seguran√ßa': 'safety_score',
            'Proximidade ao trabalho': 'accessibility_score',
            'Transporte p√∫blico': 'accessibility_score',
            'Escolas/educa√ß√£o': 'quality_of_life_score',
            'Hospitais/sa√∫de': 'quality_of_life_score',
            'Com√©rcio/shopping': 'convenience_score',
            'Restaurantes': 'convenience_score',
            'Vida noturna': 'convenience_score',
            'Parques/lazer': 'walk_score',
            'Academia/esportes': 'walk_score',
            'Sil√™ncio/tranquilidade': 'quality_of_life_score'
        }
        
        # Aumentar peso dos fatores priorit√°rios
        for factor in priority_factors:
            if factor in priority_mapping:
                metric = priority_mapping[factor]
                weights[metric] += 0.05
                weights['total_score'] -= 0.01
        
        # Normalizar para somar 1.0
        total = sum(weights.values())
        return {k: v/total for k, v in weights.items()}
    
    def _income_to_budget(self, income_level: str) -> str:
        """Converte n√≠vel de renda em faixa de or√ßamento"""
        mapping = {
            "At√© 5 sal√°rios m√≠nimos": "At√© R$ 400k",
            "5-10 sal√°rios m√≠nimos": "R$ 400k - R$ 700k",
            "10-20 sal√°rios m√≠nimos": "R$ 700k - R$ 1.5M",
            "Acima de 20 sal√°rios m√≠nimos": "Acima de R$ 1.5M"
        }
        return mapping.get(income_level, "N√£o informado")
    
    def _calculate_compatibility_weights(self, profile: UserProfile) -> Dict[str, float]:
        """Calcula matriz de compatibilidade para diferentes tipos de an√°lise"""
        
        base_weights = profile.compatibility_weights.copy()
        
        # Ajustar baseado no perfil espec√≠fico
        if profile.has_children:
            base_weights['safety_score'] = min(0.4, base_weights['safety_score'] + 0.1)
            base_weights['quality_of_life_score'] = min(0.3, base_weights['quality_of_life_score'] + 0.05)
        
        if profile.has_elderly or profile.accessibility_needs:
            base_weights['accessibility_score'] = min(0.35, base_weights['accessibility_score'] + 0.1)
        
        if profile.work_style in ["100% presencial", "H√≠brido (casa + escrit√≥rio)"]:
            base_weights['accessibility_score'] = min(0.35, base_weights['accessibility_score'] + 0.05)
        
        if "Transporte p√∫blico" in profile.transport_preference:
            base_weights['accessibility_score'] = min(0.35, base_weights['accessibility_score'] + 0.05)
        
        return base_weights
    
    def _generate_personalized_recommendations(self, profile: UserProfile) -> List[str]:
        """Gera recomenda√ß√µes personalizadas baseadas no perfil"""
        
        recommendations = []
        
        # Recomenda√ß√µes baseadas na fam√≠lia
        if profile.has_children:
            recommendations.append("üéì Priorize √°reas com boas escolas e parques infantis")
            recommendations.append("üö∏ Busque ruas com menor tr√°fego e mais seguran√ßa")
        
        if profile.has_elderly:
            recommendations.append("üè• Considere proximidade a hospitais e cl√≠nicas")
            recommendations.append("‚ôø Verifique acessibilidade de cal√ßadas e transporte")
        
        if profile.has_pets:
            recommendations.append("üêï Procure √°reas com parques e espa√ßos pet-friendly")
            recommendations.append("üè• Verifique proximidade a veterin√°rios")
        
        # Recomenda√ß√µes baseadas no trabalho
        if profile.work_style == "100% presencial":
            recommendations.append("üöä Priorize acesso a transporte p√∫blico ou proximidade ao trabalho")
        elif profile.work_style == "100% remoto":
            recommendations.append("üè† Considere √°reas mais tranquilas e com boa internet")
            recommendations.append("‚òï Procure proximidade a caf√©s e coworkings")
        
        # Recomenda√ß√µes baseadas no estilo social
        if profile.social_lifestyle in ["Vida social ativa", "Muito soci√°vel - sempre saindo"]:
            recommendations.append("üéâ Busque bairros com boa vida noturna e restaurantes")
            recommendations.append("üöá Considere facilidade de transporte noturno")
        elif profile.social_lifestyle == "Prefiro ficar em casa":
            recommendations.append("üå≥ Priorize √°reas tranquilas e arborizadas")
            recommendations.append("üìö Considere proximidade a bibliotecas e espa√ßos calmos")
        
        # Recomenda√ß√µes baseadas no or√ßamento
        if "At√© R$ 400k" in profile.budget_range:
            recommendations.append("üí∞ Considere bairros em desenvolvimento para melhor custo-benef√≠cio")
            recommendations.append("üöä Priorize transporte p√∫blico para economizar com carro")
        
        # Recomenda√ß√µes baseadas no tipo de propriedade
        if profile.property_type == "Apartamento":
            recommendations.append("üè¢ Verifique qualidade do condom√≠nio e seguran√ßa do pr√©dio")
        elif profile.property_type == "Casa":
            recommendations.append("üè° Considere seguran√ßa do bairro e manuten√ß√£o da propriedade")
        
        return recommendations
    
    def _create_profile_summary(self, profile: UserProfile) -> str:
        """Cria um resumo do perfil do usu√°rio"""
        
        summary = f"""
        üìã RESUMO DO SEU PERFIL

        üë§ Perfil Demogr√°fico:
        ‚Ä¢ Idade: {profile.age_group}
        ‚Ä¢ Situa√ß√£o familiar: {profile.family_status}
        ‚Ä¢ Renda: {profile.income_level}

        üíº Estilo de Vida:
        ‚Ä¢ Trabalho: {profile.work_style}
        ‚Ä¢ Transporte: {profile.transport_preference}
        ‚Ä¢ Social: {profile.social_lifestyle}

        üè† Prefer√™ncias Habitacionais:
        ‚Ä¢ Tipo de im√≥vel: {profile.property_type}
        ‚Ä¢ Or√ßamento: {profile.budget_range}
        ‚Ä¢ Objetivo: {profile.investment_purpose}

        üéØ Suas Prioridades:
        {', '.join(profile.priority_factors)}

        üèôÔ∏è Estilo de Bairro: {profile.neighborhood_style}
        üîä Toler√¢ncia a ru√≠do: {profile.noise_tolerance}

        ‚ú® Necessidades Especiais:
        """
        
        special_needs = []
        if profile.has_pets:
            special_needs.append("Pet-friendly")
        if profile.has_children:
            special_needs.append("Adequado para crian√ßas")
        if profile.has_elderly:
            special_needs.append("Adequado para idosos")
        if profile.accessibility_needs:
            special_needs.append("Acessibilidade")
        
        if special_needs:
            summary += f"‚Ä¢ {', '.join(special_needs)}"
        else:
            summary += "‚Ä¢ Nenhuma necessidade especial"
        
        return summary.strip()
    
    async def generate_ai_profile_analysis(self, profile: UserProfile) -> str:
        """Gera an√°lise do perfil usando IA"""
        
        if not self.openai_client:
            return "An√°lise de IA indispon√≠vel. Configure a API key do OpenAI."
        
        try:
            prompt = f"""
            Voc√™ √© um consultor imobili√°rio especializado em matching pessoa-propriedade. Analise este perfil:

            PERFIL DO CLIENTE:
            ‚Ä¢ Idade: {profile.age_group}
            ‚Ä¢ Fam√≠lia: {profile.family_status}
            ‚Ä¢ Trabalho: {profile.work_style}
            ‚Ä¢ Transporte: {profile.transport_preference}
            ‚Ä¢ Social: {profile.social_lifestyle}
            ‚Ä¢ Or√ßamento: {profile.budget_range}
            ‚Ä¢ Prioridades: {', '.join(profile.priority_factors)}
            ‚Ä¢ Bairro preferido: {profile.neighborhood_style}
            ‚Ä¢ Pets: {'Sim' if profile.has_pets else 'N√£o'}
            ‚Ä¢ Crian√ßas: {'Sim' if profile.has_children else 'N√£o'}
            ‚Ä¢ Idosos: {'Sim' if profile.has_elderly else 'N√£o'}

            Forne√ßa uma an√°lise detalhada incluindo:
            1. Resumo psicogr√°fico do cliente
            2. Tipo ideal de propriedade e localiza√ß√£o
            3. Fatores cr√≠ticos de decis√£o
            4. Poss√≠veis pontos de flexibilidade
            5. Estrat√©gia de busca recomendada

            Seja espec√≠fico e personalizado. Responda em portugu√™s brasileiro.
            """
            
            response = self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um consultor imobili√°rio experiente especializado em an√°lise de perfil de clientes."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1200,
                temperature=0.7
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"Erro gerando an√°lise de IA: {str(e)}")
            return f"Erro ao gerar an√°lise de IA: {str(e)}" 